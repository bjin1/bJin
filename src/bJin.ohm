bJin {
  Program     = Statement+

  Statement   = (let | const) id "=" Exp ";"                --vardecl
              | FunDecl
              | Var ("++" | "--") ";"                       --bump
              | Var "=" Exp ";"                             --assign
              | Var_call ";"                                --call   
              | break ";"                                   --break
              | return Exp? ";"                             --return
              | IfStmt
              | LoopStmt

  FunDecl     = func id Params (":" TypeExp)? Block
  Params      = "(" ListOf<Param, ","> ")"
  Param       = id ":" TypeExp

  TypeExp     = "[" TypeExp "]"                             --list
              | "(" ListOf<TypeExp, ","> ")" "->" TypeExp   --func
              | id                                          --id

  IfStmt      = if Exp Block else (Block | IfStmt)          --long
              | if Exp Block                                --short
  LoopStmt    = while Exp Block                             --while
              | for id in Exp Block                         --collection
  Block       = "{" Statement* "}"

  Exp         = Exp1 "?" Exp1 ":" Exp                       --conditional
              | Exp1
  Exp1        = Exp2 ("||" Exp2)+                           --or
              | Exp2 ("&&" Exp2)+                           --and
              | Exp2
  Exp2        = Exp3 ("<="|"<"|"=="|"!="|">="|">") Exp3     --compare
              | Exp3
  Exp3        = Exp3 ("+" | "-") Exp4                       --add
              | Exp4
  Exp4        = Exp4 ("*"| "/" | "%") Exp5                  --multiply
              | Exp5
  Exp5        = ("-" | "!") Exp6                       --unary
              | Exp6
  Exp6        = true
              | false
              | floatlit
              | intlit
              | stringlit
              | "[]" "(" of TypeExp ")"                     --emptylist
              | "[" NonemptyListOf<Exp, ","> "]"            --listexp
              | "(" Exp ")"                                 --parens
              | Var
              
  Var         = Var ("[" | "?[") Exp "]"                    --subscript
              | Var ("." | "?.") id                         --member
              | Var ("(" | "?(") ListOf<Exp, ","> ")"       --call
              | id                                          --id

  intlit      = digit+
  floatlit    = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
  stringlit   = "\"" char* "\""
  char        = ~control ~"\\" ~"\"" any
              | "\\" ("n" | "t" | "\"" | "\\")              --escape
              | "\\u{" hex hex? hex? hex? hex? hex? "}"     --codepoint
  control     = "\x00".."\x1f" | "\x80".."\x9f"
  hex         = hexDigit

  let         = "let" ~alnum
  const       = "const" ~alnum
  func        = "func" ~alnum
  if          = "if" ~alnum
  else        = "else" ~alnum
  while       = "while" ~alnum
  for         = "for" ~alnum
  in          = "in" ~alnum
  of          = "of" ~alnum
  break       = "break" ~alnum
  return      = "return" ~alnum
  true        = "true" ~alnum
  false       = "false" ~alnum
  keyword     = let | const | func | if | else | while | for | in
              | of | break | return | true | false
  id          = ~keyword letter alnum*

  space      += "//" (~"\n" any)* ("\n" | end)              --comment
}
